{"name":"Slide","tagline":"slidejs","body":"slide\r\n=====\r\n\r\n## 开发中... ##\r\n\r\n\r\n### 设计 ###\r\n- 基础slide\r\n\r\n- pagination 控制跳转到具体slide\r\n\r\n- control 控制左右或者上下的按钮\r\n\r\n- 自由组合，如slide+pagination 就是一个tab组件，slide+control 简单的轮播切换\r\n\r\n- 支持css3\r\n\r\n- 支持touch *\r\n\r\n- 动态创建实例 *\r\n\r\n- 不依赖JQ？adapter？消息？ *\r\n\r\n- 自由组合 , 合并打包 grunt 实现 *\r\n\r\n- destroy方法 *\r\n\r\n- 优化 *\r\n\r\n\r\n### 问题 ###\r\n - mouseover 到 pagination 动画处理\r\n - 连续动画的处理\r\n - 暂停的动作和动画会有冲突 timer方式需要优化 fixed\r\n\r\n***\r\n# 文档  \r\n##基本用法\r\n<pre>\r\n用法1：$(elem).slide(options);\r\n用法2：var obj=$.slide(options,elem);\r\n其中elem必选，表示组件的容器，是一个jQuery选择器或dom元素。\r\noptions见参数说明，参数都有默认值，可以不写\r\n\r\n//example:\r\nvar mySlide= $.slide({\r\n    slide: {\r\n    },\r\n    control: {\r\n    },\r\n    pagination:{\r\n    },\r\n    play: {\r\n    },\r\n    pagination: {\r\n    },\r\n    stopAtEdge: true\r\n}, $(\"#slide\"));\r\n</pre>\r\n##参数说明\r\n###slide\r\n<pre>\r\nslide: {\r\n    index: 0, //显示第0个slide\r\n    currentClass: \"cur\", //当前显示的slide添加的className\r\n    container: \".slide-container\", //包含所有slide的父节点  jQuery选择器或者dom元素 $(opts.container, this.element)\r\n    content: \".slide\" //所有slide节点  jQuery选择器或者dom元素 $(opts.content, this.container)\r\n}\r\n</pre>\r\n\r\n###pagination\r\n<pre>\r\npagination: {\r\n    elem: \".pagination\", //包含pagination的父节点 jQuery选择器或者dom元素 $(opts.elem)\r\n    child: \"li\", //所有pagination节点  jQuery选择器或者dom元素  $(opts.child, 父节点)\r\n    currentClass: \"cur\", //当前显示的pagination添加的className\r\n    type: \"click\"//[\"click\"|\"mousemove\"] pagination父节点上冒泡监听的事件类型\r\n}\r\n</pre>\r\n\r\n###control\r\n<pre>\r\ncontrol: {\r\n     left: \".control-left\",  //左边的控制按钮的节点 jQuery选择器或者dom元素  $(opts.left)\r\n     right: \".control-right\", //同上，右边的控制按钮\r\n     disableClass: \"control-disable\", //按钮失效时添加的className （非循环轮播的情况下可以使用）\r\n     type: \"click\" //控制按钮监听的事件\r\n }\r\n</pre>\r\n\r\n###animate\r\n<pre>\r\nanimate: {\r\n     styles: \"slide\", //[\"fade\"|\"slide\"]轮播动画类型\r\n     easing: \"ease-in-out\", //css3支持的animation-timing-function. (由于jQuery默认只提供\"linear\" 和 \"swing\",在不支持css3的浏览器，easing的参数不为linear时全部变为swing)\r\n     speed: 800 //动画持续时间\r\n }\r\n</pre>\r\n\r\n###play\r\n<pre>\r\nplay: {\r\n     reverse: false, //反向播放,默认播放顺序是从左到右\r\n     auto: true, //是否自动播放\r\n     pause: true, //鼠标移动到slide可以暂停自动播放\r\n     delay: 3000 //自动播放延迟\r\n }\r\n</pre>\r\n\r\n##插件说明\r\n###stop-at-edge.js 轮播到最后一张时不能继续向后\r\n<pre>\r\noptions: {\r\n    stopAtEdge: false //是否在边缘停止 （如：轮播到最后一张时不能继续点击向后）\r\n}\r\n</pre>\r\n###animate-carousel.js  旋转木马的轮播效果\r\n<pre>\r\noptions: {\r\n    animate: {\r\n        styles: \"carousel\"//定义动画类型\r\n    },\r\n     carousel: {\r\n        max: 5,//一行同时显示的slide数\r\n        info: {\r\n            size: [\r\n                {w: 180, h: 80},//小中大三种slide的尺寸 从左到右\r\n                {w: 260, h: 120},\r\n                {w: 340, h: 160}\r\n            ],\r\n            len: [60, 100], //表示slide隐藏的长度 从左到右\r\n            top: [60, 30, 10]//表示slide距离父容器顶部的距离\r\n        }\r\n    }\r\n}\r\n</pre>\r\n\r\n##消息事件\r\n###ui_create\r\n####事件中的参数\r\n<pre>\r\nthis.element.trigger(\"ui_create\", options);//整个组件的参数\r\n</pre>\r\n###ui_jump\r\n####事件中的参数\r\n<pre>\r\nthis.element.trigger(\"ui_jump\", {\r\n    direct: direct,//number (1/-1) slide轮播的方向（1代表正向,从右到左，-1相反）\r\n    step: step,//number (轮播的步长)\r\n    lastIndex: lastIndex,//number(轮播前的显示slide)\r\n    index:this.index //number (当前显示的slide)\r\n});\r\n</pre>\r\n###ui_control\r\n####事件中的参数\r\n<pre>\r\nthis.element.trigger(\"ui_control\", {\r\n    type: name,//\"left\",\"right\"\r\n    elem: ret[name] // 按钮的dom元素\r\n});\r\n</pre>\r\n###ui\\_carousel\\_done | ui\\_slide\\_done | ui\\_fade\\_done\r\n####无参数\r\n<pre>\r\nthis.element.trigger(\"ui_carousel_done\"); //ui_carousel_done | ui_slide_done | ui_fade_done\r\n</pre>\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}